// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.15.8
// source: gophkeeper.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// GophkeeperClient is the client API for Gophkeeper service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GophkeeperClient interface {
	Login(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*AuthMeta, error)
	Register(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*AuthMeta, error)
	GetSecretSyncMeta(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSecretsSyncDataResponse, error)
	GetSecret(ctx context.Context, in *SecretID, opts ...grpc.CallOption) (*EncodedSecret, error)
	SaveEncodedSecret(ctx context.Context, in *EncodedSecret, opts ...grpc.CallOption) (*emptypb.Empty, error)
	DeleteSecret(ctx context.Context, in *SecretID, opts ...grpc.CallOption) (*emptypb.Empty, error)
	SubscribeOnChange(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Gophkeeper_SubscribeOnChangeClient, error)
}

type gophkeeperClient struct {
	cc grpc.ClientConnInterface
}

func NewGophkeeperClient(cc grpc.ClientConnInterface) GophkeeperClient {
	return &gophkeeperClient{cc}
}

func (c *gophkeeperClient) Login(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*AuthMeta, error) {
	out := new(AuthMeta)
	err := c.cc.Invoke(ctx, "/proto.Gophkeeper/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophkeeperClient) Register(ctx context.Context, in *Credentials, opts ...grpc.CallOption) (*AuthMeta, error) {
	out := new(AuthMeta)
	err := c.cc.Invoke(ctx, "/proto.Gophkeeper/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophkeeperClient) GetSecretSyncMeta(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetSecretsSyncDataResponse, error) {
	out := new(GetSecretsSyncDataResponse)
	err := c.cc.Invoke(ctx, "/proto.Gophkeeper/GetSecretSyncMeta", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophkeeperClient) GetSecret(ctx context.Context, in *SecretID, opts ...grpc.CallOption) (*EncodedSecret, error) {
	out := new(EncodedSecret)
	err := c.cc.Invoke(ctx, "/proto.Gophkeeper/GetSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophkeeperClient) SaveEncodedSecret(ctx context.Context, in *EncodedSecret, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.Gophkeeper/SaveEncodedSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophkeeperClient) DeleteSecret(ctx context.Context, in *SecretID, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/proto.Gophkeeper/DeleteSecret", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gophkeeperClient) SubscribeOnChange(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (Gophkeeper_SubscribeOnChangeClient, error) {
	stream, err := c.cc.NewStream(ctx, &Gophkeeper_ServiceDesc.Streams[0], "/proto.Gophkeeper/SubscribeOnChange", opts...)
	if err != nil {
		return nil, err
	}
	x := &gophkeeperSubscribeOnChangeClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Gophkeeper_SubscribeOnChangeClient interface {
	Recv() (*ChangeEvent, error)
	grpc.ClientStream
}

type gophkeeperSubscribeOnChangeClient struct {
	grpc.ClientStream
}

func (x *gophkeeperSubscribeOnChangeClient) Recv() (*ChangeEvent, error) {
	m := new(ChangeEvent)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// GophkeeperServer is the server API for Gophkeeper service.
// All implementations must embed UnimplementedGophkeeperServer
// for forward compatibility
type GophkeeperServer interface {
	Login(context.Context, *Credentials) (*AuthMeta, error)
	Register(context.Context, *Credentials) (*AuthMeta, error)
	GetSecretSyncMeta(context.Context, *emptypb.Empty) (*GetSecretsSyncDataResponse, error)
	GetSecret(context.Context, *SecretID) (*EncodedSecret, error)
	SaveEncodedSecret(context.Context, *EncodedSecret) (*emptypb.Empty, error)
	DeleteSecret(context.Context, *SecretID) (*emptypb.Empty, error)
	SubscribeOnChange(*emptypb.Empty, Gophkeeper_SubscribeOnChangeServer) error
	mustEmbedUnimplementedGophkeeperServer()
}

// UnimplementedGophkeeperServer must be embedded to have forward compatible implementations.
type UnimplementedGophkeeperServer struct {
}

func (UnimplementedGophkeeperServer) Login(context.Context, *Credentials) (*AuthMeta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedGophkeeperServer) Register(context.Context, *Credentials) (*AuthMeta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedGophkeeperServer) GetSecretSyncMeta(context.Context, *emptypb.Empty) (*GetSecretsSyncDataResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecretSyncMeta not implemented")
}
func (UnimplementedGophkeeperServer) GetSecret(context.Context, *SecretID) (*EncodedSecret, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSecret not implemented")
}
func (UnimplementedGophkeeperServer) SaveEncodedSecret(context.Context, *EncodedSecret) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveEncodedSecret not implemented")
}
func (UnimplementedGophkeeperServer) DeleteSecret(context.Context, *SecretID) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteSecret not implemented")
}
func (UnimplementedGophkeeperServer) SubscribeOnChange(*emptypb.Empty, Gophkeeper_SubscribeOnChangeServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeOnChange not implemented")
}
func (UnimplementedGophkeeperServer) mustEmbedUnimplementedGophkeeperServer() {}

// UnsafeGophkeeperServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GophkeeperServer will
// result in compilation errors.
type UnsafeGophkeeperServer interface {
	mustEmbedUnimplementedGophkeeperServer()
}

func RegisterGophkeeperServer(s grpc.ServiceRegistrar, srv GophkeeperServer) {
	s.RegisterService(&Gophkeeper_ServiceDesc, srv)
}

func _Gophkeeper_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gophkeeper/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperServer).Login(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gophkeeper_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Credentials)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gophkeeper/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperServer).Register(ctx, req.(*Credentials))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gophkeeper_GetSecretSyncMeta_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperServer).GetSecretSyncMeta(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gophkeeper/GetSecretSyncMeta",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperServer).GetSecretSyncMeta(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gophkeeper_GetSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperServer).GetSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gophkeeper/GetSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperServer).GetSecret(ctx, req.(*SecretID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gophkeeper_SaveEncodedSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EncodedSecret)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperServer).SaveEncodedSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gophkeeper/SaveEncodedSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperServer).SaveEncodedSecret(ctx, req.(*EncodedSecret))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gophkeeper_DeleteSecret_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SecretID)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GophkeeperServer).DeleteSecret(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/proto.Gophkeeper/DeleteSecret",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GophkeeperServer).DeleteSecret(ctx, req.(*SecretID))
	}
	return interceptor(ctx, in, info, handler)
}

func _Gophkeeper_SubscribeOnChange_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(GophkeeperServer).SubscribeOnChange(m, &gophkeeperSubscribeOnChangeServer{stream})
}

type Gophkeeper_SubscribeOnChangeServer interface {
	Send(*ChangeEvent) error
	grpc.ServerStream
}

type gophkeeperSubscribeOnChangeServer struct {
	grpc.ServerStream
}

func (x *gophkeeperSubscribeOnChangeServer) Send(m *ChangeEvent) error {
	return x.ServerStream.SendMsg(m)
}

// Gophkeeper_ServiceDesc is the grpc.ServiceDesc for Gophkeeper service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Gophkeeper_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proto.Gophkeeper",
	HandlerType: (*GophkeeperServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _Gophkeeper_Login_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _Gophkeeper_Register_Handler,
		},
		{
			MethodName: "GetSecretSyncMeta",
			Handler:    _Gophkeeper_GetSecretSyncMeta_Handler,
		},
		{
			MethodName: "GetSecret",
			Handler:    _Gophkeeper_GetSecret_Handler,
		},
		{
			MethodName: "SaveEncodedSecret",
			Handler:    _Gophkeeper_SaveEncodedSecret_Handler,
		},
		{
			MethodName: "DeleteSecret",
			Handler:    _Gophkeeper_DeleteSecret_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SubscribeOnChange",
			Handler:       _Gophkeeper_SubscribeOnChange_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "gophkeeper.proto",
}
