// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/apolsh/yapr-gophkeeper/internal/backend/service (interfaces: UserStorage,SecretStorage)

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	model "github.com/apolsh/yapr-gophkeeper/internal/model"
	dto "github.com/apolsh/yapr-gophkeeper/internal/model/dto"
	gomock "github.com/golang/mock/gomock"
)

// MockUserStorage is a mock of UserStorage interface.
type MockUserStorage struct {
	ctrl     *gomock.Controller
	recorder *MockUserStorageMockRecorder
}

// MockUserStorageMockRecorder is the mock recorder for MockUserStorage.
type MockUserStorageMockRecorder struct {
	mock *MockUserStorage
}

// NewMockUserStorage creates a new mock instance.
func NewMockUserStorage(ctrl *gomock.Controller) *MockUserStorage {
	mock := &MockUserStorage{ctrl: ctrl}
	mock.recorder = &MockUserStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserStorage) EXPECT() *MockUserStorageMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockUserStorage) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockUserStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockUserStorage)(nil).Close))
}

// GetUserByLogin mocks base method.
func (m *MockUserStorage) GetUserByLogin(arg0 context.Context, arg1 string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLogin", arg0, arg1)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin.
func (mr *MockUserStorageMockRecorder) GetUserByLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockUserStorage)(nil).GetUserByLogin), arg0, arg1)
}

// NewUser mocks base method.
func (m *MockUserStorage) NewUser(arg0 context.Context, arg1, arg2 string) (model.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "NewUser", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NewUser indicates an expected call of NewUser.
func (mr *MockUserStorageMockRecorder) NewUser(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NewUser", reflect.TypeOf((*MockUserStorage)(nil).NewUser), arg0, arg1, arg2)
}

// MockSecretStorage is a mock of SecretStorage interface.
type MockSecretStorage struct {
	ctrl     *gomock.Controller
	recorder *MockSecretStorageMockRecorder
}

// MockSecretStorageMockRecorder is the mock recorder for MockSecretStorage.
type MockSecretStorageMockRecorder struct {
	mock *MockSecretStorage
}

// NewMockSecretStorage creates a new mock instance.
func NewMockSecretStorage(ctrl *gomock.Controller) *MockSecretStorage {
	mock := &MockSecretStorage{ctrl: ctrl}
	mock.recorder = &MockSecretStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSecretStorage) EXPECT() *MockSecretStorageMockRecorder {
	return m.recorder
}

// Close mocks base method.
func (m *MockSecretStorage) Close() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Close")
}

// Close indicates an expected call of Close.
func (mr *MockSecretStorageMockRecorder) Close() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Close", reflect.TypeOf((*MockSecretStorage)(nil).Close))
}

// DeleteEncodedSecret mocks base method.
func (m *MockSecretStorage) DeleteEncodedSecret(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEncodedSecret", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteEncodedSecret indicates an expected call of DeleteEncodedSecret.
func (mr *MockSecretStorageMockRecorder) DeleteEncodedSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEncodedSecret", reflect.TypeOf((*MockSecretStorage)(nil).DeleteEncodedSecret), arg0, arg1)
}

// GetSecretByID mocks base method.
func (m *MockSecretStorage) GetSecretByID(arg0 context.Context, arg1 string) (model.EncodedSecret, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretByID", arg0, arg1)
	ret0, _ := ret[0].(model.EncodedSecret)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretByID indicates an expected call of GetSecretByID.
func (mr *MockSecretStorageMockRecorder) GetSecretByID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretByID", reflect.TypeOf((*MockSecretStorage)(nil).GetSecretByID), arg0, arg1)
}

// GetSecretSyncMetaByUser mocks base method.
func (m *MockSecretStorage) GetSecretSyncMetaByUser(arg0 context.Context, arg1 int64) ([]dto.SecretSyncMetadata, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSecretSyncMetaByUser", arg0, arg1)
	ret0, _ := ret[0].([]dto.SecretSyncMetadata)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSecretSyncMetaByUser indicates an expected call of GetSecretSyncMetaByUser.
func (mr *MockSecretStorageMockRecorder) GetSecretSyncMetaByUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSecretSyncMetaByUser", reflect.TypeOf((*MockSecretStorage)(nil).GetSecretSyncMetaByUser), arg0, arg1)
}

// SaveEncodedSecret mocks base method.
func (m *MockSecretStorage) SaveEncodedSecret(arg0 context.Context, arg1 model.EncodedSecret) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEncodedSecret", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveEncodedSecret indicates an expected call of SaveEncodedSecret.
func (mr *MockSecretStorageMockRecorder) SaveEncodedSecret(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEncodedSecret", reflect.TypeOf((*MockSecretStorage)(nil).SaveEncodedSecret), arg0, arg1)
}
